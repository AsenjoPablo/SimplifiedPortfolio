{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["API","App","state","quotes","quote","author","index","color","componentDidMount","fetch","then","res","json","setState","getRandomIndex","componentDidUpdate","setTimeout","console","log","length","Math","floor","random","getRandomColor","colors","randCol","this","tweetURL","document","body","style","className","id","aria-hidden","href","target","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wPAIMA,G,MAAM,0IA0FGC,E,4MAvFbC,MAAQ,CACNC,OAAQ,CAAC,CACPC,MAAO,0BACPC,OAAQ,aAEVC,MAAO,EACPC,MAAO,W,EAGTC,kBAAoB,WAElBC,MAAMT,GAAKU,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAC1BF,MAAK,SAAAC,GACJ,EAAKE,SAAS,CACZV,OAAQQ,EAAIR,QACX,EAAKW,oB,EAKZC,mBAAqB,WACnBC,WAAWC,QAAQC,IAAI,UAAW,M,EAGpCJ,eAAiB,WAAO,IACdX,EAAW,EAAKD,MAAhBC,OAER,GAAIA,EAAOgB,OAAS,EAAG,CACrB,IAAMb,EAAQc,KAAKC,MAAMD,KAAKE,SAAWnB,EAAOgB,QAChD,EAAKN,SAAS,CACZP,UAEF,EAAKiB,mB,EAKTA,eAAiB,WAAO,IAGlBC,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAEvI,GAJmB,EAAKtB,MAAhBC,OAIGgB,OAAS,EAAG,CACrB,IAAMM,EAAUL,KAAKC,MAAMD,KAAKE,SAAWE,EAAOL,QAClD,EAAKN,SAAS,CACZN,MAAOiB,EAAOC,O,uDAKT,IAAD,EAEkBC,KAAKxB,MAEzBE,EAJE,EAEAD,OAFA,EAEQG,OAIVqB,EAAQ,gDAA4CvB,EAAMA,MAAlD,cAA6DA,EAAMC,QAIjF,OAFAuB,SAASC,KAAKC,MAAd,sBAAqCJ,KAAKxB,MAAMK,MAAhD,KAGE,yBAAKwB,UAAU,mEACb,yBAAKA,UAAU,kCAAkCC,GAAG,aAEhD5B,GACA,yBAAK2B,UAAU,QACb,wBAAIC,GAAG,OAAOF,MAAO,CAACvB,MAAOmB,KAAKxB,MAAMK,QACtC,uBAAGwB,UAAU,yBAAyBD,MAAO,CAACvB,MAAOmB,KAAKxB,MAAMK,OAAQ0B,cAAY,SACnF7B,EAAMA,OAET,0BAAM4B,GAAG,SAASD,UAAU,qBAAqBD,MAAO,CAACvB,MAAOmB,KAAKxB,MAAMK,QAA3E,KAAsFH,EAAMC,SAIhG,yBAAK2B,GAAG,UAAUD,UAAU,kCAE1B,uBAAGC,GAAG,cAAcD,UAAU,+BAA+BG,KAAMP,EAAUQ,OAAO,UAApF,IAA8F,uBAAGJ,UAAU,gBAAgBE,cAAY,SAAvI,eACA,4BAAQD,GAAG,YAAYD,UAAU,+BAA+BK,QAASV,KAAKZ,gBAA9E,IAA+F,uBAAGiB,UAAU,eAAeE,cAAY,SAAvI,qB,GA9EMI,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlB,SAASmB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,a","file":"static/js/main.c712d043.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n// API FOR QUOTES\nconst API = 'https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json'\n\nclass App extends React.Component {\n  state = {\n    quotes: [{\n      quote: \"This is a sample quote.\",\n      author: \"Somebody\"\n    }],\n    index: 0, // quote index in API\n    color: '#16a085'\n  }\n\n  componentDidMount = () => {\n    //call API and update state\n    fetch(API).then(res => res.json())\n    .then(res => {\n      this.setState({\n        quotes: res.quotes\n      }, this.getRandomIndex)\n    })\n  }\n\n  // update\n  componentDidUpdate = () => {\n    setTimeout(console.log(\"change\"), 500)\n  }\n\n  getRandomIndex = () => {\n    const { quotes } = this.state;\n\n    if (quotes.length > 0) {\n      const index = Math.floor(Math.random() * quotes.length)\n      this.setState({\n        index\n      })\n      this.getRandomColor();\n    }\n  }\n\n  // color setter\n  getRandomColor = () => {\n    const { quotes } = this.state;\n\n    var colors = ['#16a085', '#27ae60', '#2c3e50', '#f39c12', '#e74c3c', '#9b59b6', '#FB6964', '#342224', \"#472E32\", \"#BDBB99\", \"#77B1A9\", \"#73A857\"];\n\n    if (quotes.length > 0) {\n      const randCol = Math.floor(Math.random() * colors.length)\n      this.setState({\n        color: colors[randCol]\n      })\n    }\n  }\n\n  render () {\n\n    const { quotes, index } = this.state;\n\n    const quote = quotes[index];\n\n    const tweetURL = `https://twitter.com/intent/tweet?text=${quote.quote} - ${quote.author}`;\n\n    document.body.style = `background: ${this.state.color};`;\n\n    return (\n      <div className=\"wrapper d-flex justify-content-center vh-100 align-items-center\">\n        <div className=\"col-4 box p-5 rounded shadow-lg\" id=\"quote-box\">\n          {\n            quote &&\n            <div className=\"mb-4\">\n              <h5 id=\"text\" style={{color: this.state.color}}>\n                <i className=\"fa-2x fa fa-quote-left\" style={{color: this.state.color}} aria-hidden=\"true\"></i>\n                {quote.quote}\n              </h5>\n              <cite id=\"author\" className=\"d-block text-right\" style={{color: this.state.color}}>- {quote.author}</cite>\n            </div>           \n          }\n\n          <div id=\"buttons\" className=\"d-flex justify-content-between\">\n            \n            <a id=\"tweet-quote\" className=\"btn btn-primary btn-m shadow\" href={tweetURL} target=\"_blank\"> <i className=\"fa fa-twitter\" aria-hidden=\"true\"></i> Tweet this</a>\n            <button id=\"new-quote\" className=\"btn btn-primary btn-m shadow\" onClick={this.getRandomIndex}> <i className=\"fa fa-random\" aria-hidden=\"true\"></i> Get Quote</button>\n\n          </div>\n\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}